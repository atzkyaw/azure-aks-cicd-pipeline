trigger:
  branches:
    include:
      - main

variables:
  - group: aks-variables

stages:

- stage: TestConnection
  displayName: Test AKS Connection
  jobs:
  - job: TestConnection
    displayName: Test AKS Connection
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          export AKS_CLUSTER_NAME="$(aksCluster)"
          export RESOURCE_GROUP="$(aksResourceGroup)"
          echo "AKS Cluster: $AKS_CLUSTER_NAME"
          echo "Resource Group: $RESOURCE_GROUP"
          az aks get-credentials --resource-group "$RESOURCE_GROUP" --name "$AKS_CLUSTER_NAME" --overwrite-existing
          kubectl get nodes
          

- stage: Build
  displayName: Build and Push to ACR
  jobs:
  - job: Build
    displayName: Build and Push Docker Image
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: 'build'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: Publish
      inputs:
        command: 'publish'
        publishWebProjects: true
        arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)'

    - task: Docker@2
      displayName: Docker Build and Push to ACR
      inputs:
        containerRegistry: 'ACR-ServiceConnection' 
        repository: 'weatherappnet8'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: |
          $(Build.BuildId)

- stage: DeployToDev
  displayName: Deploy to Dev using Helm
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: HelmDeploy
    displayName: Helm Deploy to Dev AKS
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: Helm Upgrade or Install
      inputs:
        azureSubscription: "$(azureSubscription)"
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Setting Kubernetes context..."
          

          export AKS_CLUSTER_NAME="$(aksCluster)"
          export RESOURCE_GROUP="$(aksResourceGroup)"
          echo "AKS Cluster: $AKS_CLUSTER_NAME"
          echo "Resource Group: $RESOURCE_GROUP"
          az aks get-credentials --resource-group "$RESOURCE_GROUP" --name "$AKS_CLUSTER_NAME" --overwrite-existing
          kubectl get nodes
          kubectl get pods --all-namespaces

          echo "Deploying using Helm..."
          helm upgrade --install weatherapp ./charts/myapp \
            --namespace dev \
            --create-namespace \
            --set image.tag=$(Build.BuildId)
          kubectl get svc -n dev


- stage: DeployToProd
  displayName: Deploy to Prod using Helm
  dependsOn: DeployToDev
  condition: succeeded()
  jobs:
  - deployment: DeployToProd
    displayName: Deploy to Production
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
            displayName: 'Checkout Repository'
            
          - task: HelmInstaller@1
            displayName: 'Install Helm'
            inputs:
              helmVersionToInstall: 'latest'

          - task: AzureCLI@2
            displayName: 'Helm Upgrade or Install in Prod'
            inputs:
              azureSubscription: "$(azureSubscription)"
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Setting Kubernetes context..."

                export AKS_CLUSTER_NAME="$(aksCluster)"
                export RESOURCE_GROUP="$(aksResourceGroup)"
                echo "AKS Cluster: $AKS_CLUSTER_NAME"
                echo "Resource Group: $RESOURCE_GROUP"
                az aks get-credentials --resource-group "$RESOURCE_GROUP" --name "$AKS_CLUSTER_NAME" --overwrite-existing
                kubectl get nodes

                echo "Deploying using Helm..."
                helm upgrade --install weatherapp ./charts/myapp \
                  --namespace prod \
                  --create-namespace \
                  --set image.tag=$(Build.BuildId)
